<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>spring-boot-examples</artifactId>
		<groupId>xyz.tomd.demos.camel</groupId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../</relativePath>
	</parent>

	<artifactId>spring-boot-example-rest-service</artifactId>
	<name>Tom D :: Camel Demos :: Spring Boot Examples :: REST Service</name>
	<description>Creating a RESTful service in Apache Camel on Spring Boot using the REST DSL</description>

<!--	<dependencyManagement>-->
<!--		<dependencies>-->
<!--			&lt;!&ndash; Spring Boot BOM &ndash;&gt;-->
<!--			<dependency>-->
<!--				<groupId>org.springframework.boot</groupId>-->
<!--				<artifactId>spring-boot-dependencies</artifactId>-->
<!--				<version>${spring-boot.version}</version>-->
<!--				<type>pom</type>-->
<!--				<scope>import</scope>-->
<!--			</dependency>-->
<!--			&lt;!&ndash; Camel BOM &ndash;&gt;-->
<!--			<dependency>-->
<!--				<groupId>org.apache.camel.springboot</groupId>-->
<!--				<artifactId>camel-spring-boot-dependencies</artifactId>-->
<!--				<version>${camel.version}</version>-->
<!--				<type>pom</type>-->
<!--				<scope>import</scope>-->
<!--			</dependency>-->
<!--		</dependencies>-->
<!--	</dependencyManagement>-->


	<dependencies>
		<dependency>
			<groupId>org.apache.camel.springboot</groupId>
			<artifactId>camel-activemq-starter</artifactId>
			<version>3.11.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.camel.springboot</groupId>
			<artifactId>camel-spring-boot-starter</artifactId>
			<version>3.11.0</version>
		</dependency>

		<!-- When using the REST DSL, Camel will look for org.apache.camel.spi.RestConsumerFactory on the classpath.
		By using Camel's servlet-starter, we can configure the embedded servlet container to act as a RestConsumerFactory -->
		<!-- See: https://camel.apache.org/components/latest/servlet-component.html#_usage_with_spring_boot -->
		<!-- This will automatically map all requests to /camel/* to our RESTful API -->
		<dependency>
			<groupId>org.apache.camel.springboot</groupId>
			<artifactId>camel-servlet-starter</artifactId>
		</dependency>

		<!-- Add the ability to convert JSON to a plain old Java object (POJO) -->
		<!-- We use the `-starter` version of the component in Spring Boot -->
		<dependency>
			<groupId>org.apache.camel.springboot</groupId>
			<artifactId>camel-jackson-starter</artifactId>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-test-spring</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/javax.jms/javax.jms-api -->
		<dependency>
			<groupId>javax.jms</groupId>
			<artifactId>javax.jms-api</artifactId>
			<version>2.0.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.36</version>
		</dependency>

		<dependency>
			<groupId>org.apache.camel</groupId>
			<artifactId>camel-core</artifactId>
			<version>3.11.0</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


</project>
